{"version":3,"file":"EmptyNodeHttpClient.js","sourceRoot":"","sources":["../../src/EmptyNodeHttpClient.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,+GAA+G;;;;;;;;;;;;AAE/G,mIAAmI;AAEnI,2CAAwD;AAGxD,eAAe;AACf;IAAoC,kCAAU;IAC1C,4EAA4E;IAC5E,wBAAmB,MAAe;eAC9B,iBAAO;IACX,CAAC;IAEM,6BAAI,GAAX;QACI,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iIAAiI,CAAC,CAAC,CAAC;IACxK,CAAC;IACL,qBAAC;AAAD,CAAC,AATD,CAAoC,uBAAU,GAS7C;AATY,wCAAc","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This is an empty implementation of the NodeHttpClient that will be included in browser builds so the output file will be smaller\r\n\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\n\r\n/** @private */\r\nexport class NodeHttpClient extends HttpClient {\r\n    // @ts-ignore: Need ILogger to compile, but unused variables generate errors\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n    }\r\n\r\n    public send(): Promise<HttpResponse> {\r\n        return Promise.reject(new Error(\"If using Node either provide an XmlHttpRequest polyfill or consume the cjs or esm script instead of the browser/signalr.js one.\"));\r\n    }\r\n}\r\n"]}